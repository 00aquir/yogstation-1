var/list/datum/malware/active_malware = list()

/datum/malware
	var/name = "malware"
	var/flags = 0
	var/atom/host = null
	var/infect_chance = 0
	var/mutate_on_copy_chance = 0
	var/antivirus_resistance = 0
	var/list/can_infect = null
	var/list/cannot_infect = null

/datum/malware/New()
	active_malware += src
	..()

/datum/malware/Destroy()
	active_malware -= src
	if(host)
		uninfect(0)
	return ..()

/datum/malware/proc/attempt_infect(atom/target)
	if(!target)
		return 0
	if(flags & MALWARE_NOSPREAD)
		return 0
	if(!prob(infect_chance))
		return 0
	if(can_infect && !is_type_in_list(target, can_infect))
		return 0
	if(cannot_infect && is_type_in_list(target, cannot_infect))
		return 0
	var/datum/malware/new_copy = copy()
	return new_copy.infect(target)

/datum/malware/proc/on_join(datum/malware/other)//when a new piece of malware joins your host.
	if(istype(other, type) && !(other.flags && MALWARE_NOCOPY) )//prevents massive spam of duplicate viruses on the same machine.
		return 1
	return 0

/datum/malware/proc/copy(do_not_mutate = 0)
	if(flags & MALWARE_NOCOPY)
		return src
	var/datum/malware/the_copy = new src.type()
	the_copy.name = src.name
	the_copy.flags = src.flags
	the_copy.infect_chance = src.infect_chance
	the_copy.antivirus_resistance = src.antivirus_resistance
	the_copy.mutate_on_copy_chance = src.mutate_on_copy_chance
	if(can_infect)
		the_copy.can_infect = src.can_infect.Copy()
	if(cannot_infect)
		the_copy.cannot_infect = src.cannot_infect.Copy()

	if(!do_not_mutate && prob(mutate_on_copy_chance))
		mutate()
	return the_copy

/datum/malware/proc/mutate()
	if(flags & MALWARE_NOMUTATE)
		return 0
	infect_chance = Clamp(infect_chance + rand(-2, 2), 0, 100)
	mutate_on_copy_chance = Clamp(infect_chance + rand(-2, 2), 0, 100)
	antivirus_resistance = Clamp(infect_chance + rand(-2, 2), 0, 100)
	if(prob(5))
		flags ^= MALWARE_EMPIMMUNE
	if(prob(5))
		flags ^= MALWARE_SPREAD_POWERNET
	return 1

/datum/malware/proc/uninfect(delete = 1)
	if(host)
		if(istype(host, /obj/item/device/pda))
			var/obj/item/device/pda/PDA = host
			PDA.malware -= src
		if(istype(host, /obj/machinery))
			var/obj/machinery/M = host
			M.malware -= src
		if(istype(host, /obj/item/device/multitool))
			var/obj/item/device/multitool/M = host
			M.malware -= src
	host = null
	if(delete)
		qdel(src)

/datum/malware/proc/infect(atom/target)
	var/target_malware_list = null
	if(istype(target, /obj/item/device/pda))
		var/obj/item/device/pda/PDA = target
		if(!PDA.malware)
			PDA.malware = list()
		target_malware_list = PDA.malware
	if(istype(target, /obj/machinery))
		var/obj/machinery/M = target
		if(!M.malware)
			M.malware = list()
		target_malware_list = M.malware
	if(istype(target, /obj/item/device/multitool))
		var/obj/item/device/multitool/M = target
		if(!M.malware)
			M.malware = list()
		target_malware_list = M.malware

	if(target_malware_list)
		for(var/V in target_malware_list)
			var/datum/malware/other = V
			if(other.on_join(src))
				qdel(src)
				return 1
		uninfect(0)
		host = target
		target_malware_list += src
		return 1
	if(!host)
		qdel(src)
	return 0

/datum/malware/proc/onTopicCall(href, href_list)
	return 0 //returning 1 makes the topic fail.

/datum/malware/proc/onEMP()
	if(!(flags & MALWARE_EMPIMMUNE))
		uninfect()

/datum/malware/proc/onMachineTick()
	return

/datum/malware/proc/onActivate(mob/user)
	return 0
